/***
 * Copyright (c) 2009-2019 Jean-Fran√ßois Lamy
 *
 * Licensed under the Non-Profit Open Software License version 3.0  ("Non-Profit OSL" 3.0)
 * License text at https://github.com/jflamy/owlcms4/blob/master/LICENSE.txt
 */
package app.owlcms.ui.preparation;

import java.util.Collection;

import org.slf4j.LoggerFactory;
import org.vaadin.crudui.crud.CrudOperation;

import com.vaadin.flow.component.ClickEvent;
import com.vaadin.flow.component.Component;
import com.vaadin.flow.component.ComponentEventListener;
import com.vaadin.flow.component.button.Button;
import com.vaadin.flow.component.formlayout.FormLayout;
import com.vaadin.flow.component.notification.Notification;
import com.vaadin.flow.component.orderedlayout.VerticalLayout;
import com.vaadin.flow.component.textfield.TextField;

import app.owlcms.components.fields.ValidationTextField;
import app.owlcms.data.competition.Competition;
import app.owlcms.data.competition.CompetitionRepository;
import app.owlcms.i18n.Translator;
import app.owlcms.ui.crudui.OwlcmsCrudFormFactory;
import ch.qos.logback.classic.Logger;

@SuppressWarnings("serial")
class CompetitionEditingFormFactory_new extends OwlcmsCrudFormFactory<Competition> {
    Logger logger = (Logger) LoggerFactory.getLogger(CompetitionEditingFormFactory.class);

    CompetitionEditingFormFactory_new(Class<Competition> domainType) {
        super(domainType);
    }

    @Override
    public Competition add(Competition domainObjectToAdd) {
        // not used
        return null;
    }

    @Override
    public void delete(Competition domainObjectToDelete) {
        // not used
    }

    /**
     * Override this method if you need to add custom validations
     * 
     * @see org.vaadin.crudui.form.AbstractAutoGeneratedCrudFormFactory#bindField(com.vaadin.flow.component.HasValue,
     *      java.lang.String, java.lang.Class)
     */
//	@SuppressWarnings({ "rawtypes" })
//	@Override
//	protected void bindField(HasValue field, String property, Class<?> propertyType) {
//		if ("competitionDate".equals(property)) {
//			LocalDateField f = ((LocalDateField)field);
//			Validator<LocalDate> v = f.formatValidation(OwlcmsSession.getLocale());
//			binder.forField(f).withValidator(v).bind(property);
//		} else {
//			super.bindField(field, property, propertyType);
//		}
//	}

    @Override
    public Collection<Competition> findAll() {
        // not used
        return null;
    }

    @Override
    public Competition update(Competition ignored) {
        CompetitionRepository.save(Competition.getCurrent());
        Notification.show("Item Saved.");
        return null;
    }
    
    @Override
    public Component buildNewForm(CrudOperation operation, Competition domainObject, boolean readOnly,
            ComponentEventListener<ClickEvent<Button>> cancelButtonClickListener,
            ComponentEventListener<ClickEvent<Button>> operationButtonClickListener) {
        
        FormLayout formLayout = new FormLayout();
        formLayout.setSizeFull();
        
        TextField nameField = new ValidationTextField();
        formLayout.addFormItem(nameField, Translator.translate("Competition.competitionName"));
        
        Component footerLayout = this.buildFooter(operation, domainObject, cancelButtonClickListener,
                operationButtonClickListener);
        
        VerticalLayout mainLayout = new VerticalLayout(formLayout,
                // errorLabel,
                 footerLayout);
        return mainLayout;
    }

}